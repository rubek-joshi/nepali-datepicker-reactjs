type YearlyCalendar = {
	[year: number]: [
		number, // 1st month
		number, // 2nd month
		number, // 3rd month
		number, // 4th month
		number, // 5th month
		number, // 6th month
		number, // 7th month
		number, // 8th month
		number, // 9th month
		number, // 10th month
		number, // 11th month
		number, // 12th month
	];
};

const bs: YearlyCalendar = {
	2000: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2001: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2002: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2003: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2004: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2005: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2006: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2007: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2008: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
	2009: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2010: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2011: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2012: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
	2013: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2014: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2015: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2016: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
	2017: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2018: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2019: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2020: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
	2021: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2022: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
	2023: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2024: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
	2025: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2026: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2027: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2028: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2029: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
	2030: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2031: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2032: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2033: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2034: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2035: [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
	2036: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2037: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2038: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2039: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
	2040: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2041: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2042: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2043: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
	2044: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2045: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2046: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2047: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
	2048: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2049: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
	2050: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2051: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
	2052: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2053: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
	2054: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2055: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2056: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
	2057: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2058: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2059: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2060: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2061: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2062: [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
	2063: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2064: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2065: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2066: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
	2067: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2068: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2069: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2070: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
	2071: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2072: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2073: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
	2074: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
	2075: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2076: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
	2077: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2078: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
	2079: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
	2080: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
	2081: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
	2082: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2083: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
	2084: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
	2085: [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
	2086: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2087: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
	2088: [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
	2089: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2090: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2091: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
	2092: [30, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2093: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2094: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
	2095: [31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],
	2096: [30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
	2097: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
	2098: [31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 29, 31],
	2099: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
};

const leapYears: number[] = [];
for (let i = 2000; i < 2100; i++) {
	let totalD = 0;
	for (let j = 1; j <= 12; j++) {
		totalD += bs[i][j];
	}
	if (totalD === 366) leapYears.push(i);
}

const currentYear = 2000;
const currentMonth = 1;
const firstDay = 3;

const daysInEnglish = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
const fullDaysInEnglish = [
	'Sunday',
	'Monday',
	'Tuesday',
	'Wednesday',
	'Thursday',
	'Friday',
	'Saturday',
];
const daysInNepali = ['आइत', 'सोम', 'मंगल', 'बुध', 'बिहि', 'शुक्र', 'शनि'];
const fullDaysInNepali = ['आइतवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'बिहिवार', 'शुक्रवार', 'शनिवार'];

const monthsInEnglish = [
	'Baishakh',
	'Jestha',
	'Ashadh',
	'Shrawan',
	'Bhadra',
	'Ashoj',
	'Kartik',
	'Mangsir',
	'Poush',
	'Magh',
	'Falgun',
	'Chaitra',
];

const monthsInNepali = [
	'बैशाख',
	'जेठ',
	'असार',
	'श्रावण',
	'भदौ',
	'असोज',
	'कार्तिक',
	'मंसिर',
	'पुष',
	'माघ',
	'फाल्गुन',
	'चैत्र',
];

const nepaliNumber = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];

const getNepaliNumber = (engNum: string | number) => {
	return engNum
		.toString()
		.split('')
		.map((n) => nepaliNumber[parseInt(n)])
		.join('');
};

const getEnglishNumber = (nepNum: string | number) => {
	return parseInt(
		nepNum
			.toString()
			.split('')
			.map((n) => nepaliNumber.indexOf(n))
			.join('')
	);
};

const getFormattedDay = (language: string, length: string, index: number) => {
	if (language === 'NE') {
		if (length === 'DDD') {
			return daysInNepali[index];
		} else {
			// length DDDD
			return fullDaysInNepali[index];
		}
	} else {
		// language english
		if (length === 'DDD') {
			return daysInEnglish[index];
		} else {
			// length DDDD
			return fullDaysInEnglish[index];
		}
	}
};
const getFormattedMonth = (language: string, index: number) => {
	if (language === 'NE') {
		index = getEnglishNumber(index);
		index--;
		return monthsInNepali[index];
	} else {
		index--;
		// language english
		return monthsInEnglish[index];
	}
};

const getFullEnglishDate = (englishDate: string) => {
	const splittedDate = englishDate.split('-');
	if (splittedDate.length !== 3) {
		console.error('error splitting the date');
	}

	const [year, month, day] = splittedDate;

	const selectedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;

	return selectedDate;
};

const convertFullDateToNepali = (englishDate: string) => {
	const splittedDate = englishDate.split('-');
	if (splittedDate.length !== 3) {
		console.error('error splitting the date');
		return "";
	}

	const [year, month, day] = splittedDate;

	const selectedNepaliDate = `${year}-${month.padStart(2, '०')}-${day.padStart(2, '०')}`;

	return selectedNepaliDate;
};

export {
	bs,
	daysInNepali,
	daysInEnglish,
	monthsInNepali,
	monthsInEnglish,
	getNepaliNumber,
	getEnglishNumber,
	currentYear,
	currentMonth,
	firstDay,
	leapYears,
	getFormattedDay,
	getFormattedMonth,
	getFullEnglishDate,
	convertFullDateToNepali,
};
